{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * The programmatic identifier of the bearerTokenAuthenticationPolicy.\n */\nexport const keyCredentialAuthenticationPolicyName = \"keyCredentialAuthenticationPolicy\";\nexport function keyCredentialAuthenticationPolicy(credential, apiKeyHeaderName) {\n  return {\n    name: keyCredentialAuthenticationPolicyName,\n    async sendRequest(request, next) {\n      request.headers.set(apiKeyHeaderName, credential.key);\n      return next(request);\n    }\n  };\n}","map":{"version":3,"names":["keyCredentialAuthenticationPolicyName","keyCredentialAuthenticationPolicy","credential","apiKeyHeaderName","name","sendRequest","request","next","headers","set","key"],"sources":["/workspaces/codespaces-blank/jupyter_react/node_modules/@azure-rest/core-client/src/keyCredentialAuthenticationPolicy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { KeyCredential } from \"@azure/core-auth\";\nimport {\n  PipelinePolicy,\n  PipelineRequest,\n  PipelineResponse,\n  SendRequest,\n} from \"@azure/core-rest-pipeline\";\n\n/**\n * The programmatic identifier of the bearerTokenAuthenticationPolicy.\n */\nexport const keyCredentialAuthenticationPolicyName = \"keyCredentialAuthenticationPolicy\";\n\nexport function keyCredentialAuthenticationPolicy(\n  credential: KeyCredential,\n  apiKeyHeaderName: string,\n): PipelinePolicy {\n  return {\n    name: keyCredentialAuthenticationPolicyName,\n    async sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n      request.headers.set(apiKeyHeaderName, credential.key);\n      return next(request);\n    },\n  };\n}\n"],"mappings":"AAAA;AACA;AAUA;;;AAGA,OAAO,MAAMA,qCAAqC,GAAG,mCAAmC;AAExF,OAAM,SAAUC,iCAAiCA,CAC/CC,UAAyB,EACzBC,gBAAwB;EAExB,OAAO;IACLC,IAAI,EAAEJ,qCAAqC;IAC3C,MAAMK,WAAWA,CAACC,OAAwB,EAAEC,IAAiB;MAC3DD,OAAO,CAACE,OAAO,CAACC,GAAG,CAACN,gBAAgB,EAAED,UAAU,CAACQ,GAAG,CAAC;MACrD,OAAOH,IAAI,CAACD,OAAO,CAAC;IACtB;GACD;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}