{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { bearerTokenAuthenticationPolicy, createDefaultHttpClient, createPipelineFromOptions } from \"@azure/core-rest-pipeline\";\nimport { isTokenCredential } from \"@azure/core-auth\";\nimport { apiVersionPolicy } from \"./apiVersionPolicy\";\nimport { keyCredentialAuthenticationPolicy } from \"./keyCredentialAuthenticationPolicy\";\nlet cachedHttpClient;\n/**\n * Adds a credential policy to the pipeline if a credential is provided. If none is provided, no policy is added.\n */\nexport function addCredentialPipelinePolicy(pipeline, endpoint, options = {}) {\n  var _a, _b, _c, _d;\n  const {\n    credential,\n    clientOptions\n  } = options;\n  if (!credential) {\n    return;\n  }\n  if (isTokenCredential(credential)) {\n    const tokenPolicy = bearerTokenAuthenticationPolicy({\n      credential,\n      scopes: (_b = (_a = clientOptions === null || clientOptions === void 0 ? void 0 : clientOptions.credentials) === null || _a === void 0 ? void 0 : _a.scopes) !== null && _b !== void 0 ? _b : `${endpoint}/.default`\n    });\n    pipeline.addPolicy(tokenPolicy);\n  } else if (isKeyCredential(credential)) {\n    if (!((_c = clientOptions === null || clientOptions === void 0 ? void 0 : clientOptions.credentials) === null || _c === void 0 ? void 0 : _c.apiKeyHeaderName)) {\n      throw new Error(`Missing API Key Header Name`);\n    }\n    const keyPolicy = keyCredentialAuthenticationPolicy(credential, (_d = clientOptions === null || clientOptions === void 0 ? void 0 : clientOptions.credentials) === null || _d === void 0 ? void 0 : _d.apiKeyHeaderName);\n    pipeline.addPolicy(keyPolicy);\n  }\n}\n/**\n * Creates a default rest pipeline to re-use accross Rest Level Clients\n */\nexport function createDefaultPipeline(endpoint, credential, options = {}) {\n  const pipeline = createPipelineFromOptions(options);\n  pipeline.addPolicy(apiVersionPolicy(options));\n  addCredentialPipelinePolicy(pipeline, endpoint, {\n    credential,\n    clientOptions: options\n  });\n  return pipeline;\n}\nfunction isKeyCredential(credential) {\n  return credential.key !== undefined;\n}\nexport function getCachedDefaultHttpsClient() {\n  if (!cachedHttpClient) {\n    cachedHttpClient = createDefaultHttpClient();\n  }\n  return cachedHttpClient;\n}","map":{"version":3,"names":["bearerTokenAuthenticationPolicy","createDefaultHttpClient","createPipelineFromOptions","isTokenCredential","apiVersionPolicy","keyCredentialAuthenticationPolicy","cachedHttpClient","addCredentialPipelinePolicy","pipeline","endpoint","options","credential","clientOptions","tokenPolicy","scopes","_b","_a","credentials","addPolicy","isKeyCredential","_c","apiKeyHeaderName","Error","keyPolicy","_d","createDefaultPipeline","key","undefined","getCachedDefaultHttpsClient"],"sources":["/workspaces/codespaces-blank/jupyter_react/node_modules/@azure-rest/core-client/src/clientHelpers.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  HttpClient,\n  Pipeline,\n  bearerTokenAuthenticationPolicy,\n  createDefaultHttpClient,\n  createPipelineFromOptions,\n} from \"@azure/core-rest-pipeline\";\nimport { KeyCredential, TokenCredential, isTokenCredential } from \"@azure/core-auth\";\n\nimport { ClientOptions } from \"./common\";\nimport { apiVersionPolicy } from \"./apiVersionPolicy\";\nimport { keyCredentialAuthenticationPolicy } from \"./keyCredentialAuthenticationPolicy\";\n\nlet cachedHttpClient: HttpClient | undefined;\n\n/**\n * Optional parameters for adding a credential policy to the pipeline.\n */\nexport interface AddCredentialPipelinePolicyOptions {\n  /**\n   * Options related to the client.\n   */\n  clientOptions?: ClientOptions;\n  /**\n   * The credential to use.\n   */\n  credential?: TokenCredential | KeyCredential;\n}\n\n/**\n * Adds a credential policy to the pipeline if a credential is provided. If none is provided, no policy is added.\n */\nexport function addCredentialPipelinePolicy(\n  pipeline: Pipeline,\n  endpoint: string,\n  options: AddCredentialPipelinePolicyOptions = {},\n): void {\n  const { credential, clientOptions } = options;\n  if (!credential) {\n    return;\n  }\n\n  if (isTokenCredential(credential)) {\n    const tokenPolicy = bearerTokenAuthenticationPolicy({\n      credential,\n      scopes: clientOptions?.credentials?.scopes ?? `${endpoint}/.default`,\n    });\n    pipeline.addPolicy(tokenPolicy);\n  } else if (isKeyCredential(credential)) {\n    if (!clientOptions?.credentials?.apiKeyHeaderName) {\n      throw new Error(`Missing API Key Header Name`);\n    }\n    const keyPolicy = keyCredentialAuthenticationPolicy(\n      credential,\n      clientOptions?.credentials?.apiKeyHeaderName,\n    );\n    pipeline.addPolicy(keyPolicy);\n  }\n}\n\n/**\n * Creates a default rest pipeline to re-use accross Rest Level Clients\n */\nexport function createDefaultPipeline(\n  endpoint: string,\n  credential?: TokenCredential | KeyCredential,\n  options: ClientOptions = {},\n): Pipeline {\n  const pipeline = createPipelineFromOptions(options);\n\n  pipeline.addPolicy(apiVersionPolicy(options));\n\n  addCredentialPipelinePolicy(pipeline, endpoint, { credential, clientOptions: options });\n  return pipeline;\n}\n\nfunction isKeyCredential(credential: any): credential is KeyCredential {\n  return (credential as KeyCredential).key !== undefined;\n}\n\nexport function getCachedDefaultHttpsClient(): HttpClient {\n  if (!cachedHttpClient) {\n    cachedHttpClient = createDefaultHttpClient();\n  }\n\n  return cachedHttpClient;\n}\n"],"mappings":"AAAA;AACA;AAEA,SAGEA,+BAA+B,EAC/BC,uBAAuB,EACvBC,yBAAyB,QACpB,2BAA2B;AAClC,SAAyCC,iBAAiB,QAAQ,kBAAkB;AAGpF,SAASC,gBAAgB,QAAQ,oBAAoB;AACrD,SAASC,iCAAiC,QAAQ,qCAAqC;AAEvF,IAAIC,gBAAwC;AAgB5C;;;AAGA,OAAM,SAAUC,2BAA2BA,CACzCC,QAAkB,EAClBC,QAAgB,EAChBC,OAAA,GAA8C,EAAE;;EAEhD,MAAM;IAAEC,UAAU;IAAEC;EAAa,CAAE,GAAGF,OAAO;EAC7C,IAAI,CAACC,UAAU,EAAE;IACf;EACF;EAEA,IAAIR,iBAAiB,CAACQ,UAAU,CAAC,EAAE;IACjC,MAAME,WAAW,GAAGb,+BAA+B,CAAC;MAClDW,UAAU;MACVG,MAAM,EAAE,CAAAC,EAAA,IAAAC,EAAA,GAAAJ,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEK,WAAW,cAAAD,EAAA,uBAAAA,EAAA,CAAEF,MAAM,cAAAC,EAAA,cAAAA,EAAA,GAAI,GAAGN,QAAQ;KAC1D,CAAC;IACFD,QAAQ,CAACU,SAAS,CAACL,WAAW,CAAC;EACjC,CAAC,MAAM,IAAIM,eAAe,CAACR,UAAU,CAAC,EAAE;IACtC,IAAI,EAAC,CAAAS,EAAA,GAAAR,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEK,WAAW,cAAAG,EAAA,uBAAAA,EAAA,CAAEC,gBAAgB,GAAE;MACjD,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAChD;IACA,MAAMC,SAAS,GAAGlB,iCAAiC,CACjDM,UAAU,EACV,CAAAa,EAAA,GAAAZ,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEK,WAAW,cAAAO,EAAA,uBAAAA,EAAA,CAAEH,gBAAgB,CAC7C;IACDb,QAAQ,CAACU,SAAS,CAACK,SAAS,CAAC;EAC/B;AACF;AAEA;;;AAGA,OAAM,SAAUE,qBAAqBA,CACnChB,QAAgB,EAChBE,UAA4C,EAC5CD,OAAA,GAAyB,EAAE;EAE3B,MAAMF,QAAQ,GAAGN,yBAAyB,CAACQ,OAAO,CAAC;EAEnDF,QAAQ,CAACU,SAAS,CAACd,gBAAgB,CAACM,OAAO,CAAC,CAAC;EAE7CH,2BAA2B,CAACC,QAAQ,EAAEC,QAAQ,EAAE;IAAEE,UAAU;IAAEC,aAAa,EAAEF;EAAO,CAAE,CAAC;EACvF,OAAOF,QAAQ;AACjB;AAEA,SAASW,eAAeA,CAACR,UAAe;EACtC,OAAQA,UAA4B,CAACe,GAAG,KAAKC,SAAS;AACxD;AAEA,OAAM,SAAUC,2BAA2BA,CAAA;EACzC,IAAI,CAACtB,gBAAgB,EAAE;IACrBA,gBAAgB,GAAGL,uBAAuB,EAAE;EAC9C;EAEA,OAAOK,gBAAgB;AACzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}