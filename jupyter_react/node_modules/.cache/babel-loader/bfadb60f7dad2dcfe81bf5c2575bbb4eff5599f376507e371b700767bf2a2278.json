{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { __rest } from \"tslib\";\nimport { camelCaseKeys } from \"../../util.js\";\nfunction getContentFilterResultsForPrompt({\n  prompt_annotations,\n  prompt_filter_results\n}) {\n  var _a;\n  const res = prompt_filter_results !== null && prompt_filter_results !== void 0 ? prompt_filter_results : prompt_annotations;\n  return (_a = res === null || res === void 0 ? void 0 : res.map(_a => {\n    var {\n        content_filter_results\n      } = _a,\n      rest = __rest(_a, [\"content_filter_results\"]);\n    return Object.assign(Object.assign({}, camelCaseKeys(rest)), {\n      contentFilterResults: parseContentFilterResultDetailsForPromptOutput(content_filter_results)\n    });\n  })) !== null && _a !== void 0 ? _a : [];\n}\nexport function getCompletionsResult(body) {\n  const {\n      created,\n      choices,\n      prompt_filter_results,\n      prompt_annotations\n    } = body,\n    rest = __rest(body, [\"created\", \"choices\", \"prompt_filter_results\", \"prompt_annotations\"]);\n  return Object.assign(Object.assign({}, camelCaseKeys(rest)), {\n    created: new Date(created),\n    promptFilterResults: getContentFilterResultsForPrompt({\n      prompt_filter_results,\n      prompt_annotations\n    }),\n    choices: choices.map(_a => {\n      var {\n          content_filter_results\n        } = _a,\n        choice = __rest(_a, [\"content_filter_results\"]);\n      return Object.assign(Object.assign({}, camelCaseKeys(choice)), !content_filter_results ? {} : {\n        contentFilterResults: parseContentFilterResultsForChoiceOutput(content_filter_results)\n      });\n    })\n  });\n}\nexport function getChatCompletionsResult(body) {\n  const {\n      created,\n      choices,\n      prompt_filter_results,\n      prompt_annotations\n    } = body,\n    rest = __rest(body, [\"created\", \"choices\", \"prompt_filter_results\", \"prompt_annotations\"]);\n  return Object.assign(Object.assign({}, camelCaseKeys(rest)), {\n    created: new Date(created),\n    promptFilterResults: getContentFilterResultsForPrompt({\n      prompt_filter_results,\n      prompt_annotations\n    }),\n    choices: !choices ? [] : choices.map(_a => {\n      var {\n          content_filter_results,\n          delta,\n          message\n        } = _a,\n        choice = __rest(_a, [\"content_filter_results\", \"delta\", \"message\"]);\n      return Object.assign(Object.assign(Object.assign(Object.assign({}, camelCaseKeys(choice)), !delta ? {} : {\n        delta: parseMessage(delta)\n      }), !message ? {} : {\n        message: parseMessage(message)\n      }), !content_filter_results ? {} : {\n        contentFilterResults: parseContentFilterResultsForChoiceOutput(content_filter_results)\n      });\n    })\n  });\n}\nfunction parseMessage(message) {\n  const {\n      context,\n      tool_calls\n    } = message,\n    rest = __rest(message, [\"context\", \"tool_calls\"]);\n  return Object.assign(Object.assign(Object.assign({}, camelCaseKeys(rest)), {\n    toolCalls: tool_calls !== null && tool_calls !== void 0 ? tool_calls : []\n  }), !context ? {} : {\n    context: Object.assign({}, !context.messages ? {} : {\n      messages: context.messages.map(parseMessage)\n    })\n  });\n}\nfunction parseError(error) {\n  var _a;\n  return {\n    error: Object.assign(Object.assign({}, error), {\n      details: (_a = error[\"details\"]) !== null && _a !== void 0 ? _a : []\n    })\n  };\n}\nfunction parseContentFilterResultDetailsForPromptOutput(_a = {}) {\n  var {\n      error\n    } = _a,\n    rest = __rest(_a, [\"error\"]);\n  return error ? parseError(error) : camelCaseKeys(rest);\n}\nfunction parseContentFilterResultsForChoiceOutput(_a = {}) {\n  var {\n      error\n    } = _a,\n    rest = __rest(_a, [\"error\"]);\n  return error ? parseError(error) : camelCaseKeys(rest);\n}","map":{"version":3,"names":["camelCaseKeys","getContentFilterResultsForPrompt","prompt_annotations","prompt_filter_results","res","_a","map","content_filter_results","rest","__rest","Object","assign","contentFilterResults","parseContentFilterResultDetailsForPromptOutput","getCompletionsResult","body","created","choices","Date","promptFilterResults","choice","parseContentFilterResultsForChoiceOutput","getChatCompletionsResult","delta","message","parseMessage","context","tool_calls","toolCalls","messages","parseError","error","details"],"sources":["/workspaces/codespaces-blank/jupyter_react/node_modules/@azure/openai/src/api/client/openAIClient/deserializers.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * THIS IS AN AUTO-GENERATED FILE - DO NOT EDIT!\n *\n * Any changes you make here may be lost.\n *\n * If you need to make changes, please do so in the original source file, \\{project-root\\}/sources/custom\n */\n\nimport { ErrorModel } from \"@azure-rest/core-client\";\nimport {\n  ChatCompletions,\n  ChatResponseMessage,\n  Completions,\n  ContentFilterResultDetailsForPrompt,\n  ContentFilterResultsForChoice,\n  ContentFilterResultsForPrompt,\n} from \"../../../models/models.js\";\nimport {\n  ChatCompletionsOutput,\n  ChatResponseMessageOutput,\n  CompletionsOutput,\n  ContentFilterResultDetailsForPromptOutput,\n  ContentFilterResultsForChoiceOutput,\n  ContentFilterResultsForPromptOutput,\n} from \"../../../rest/outputModels.js\";\nimport { camelCaseKeys } from \"../../util.js\";\n\ntype ContentFilterResultsForPromptX = {\n  prompt_filter_results?: Array<ContentFilterResultsForPromptOutput>;\n  prompt_annotations?: Array<ContentFilterResultsForPromptOutput>;\n};\n\nfunction getContentFilterResultsForPrompt({\n  prompt_annotations,\n  prompt_filter_results,\n}: ContentFilterResultsForPromptX): ContentFilterResultsForPrompt[] {\n  const res = prompt_filter_results ?? prompt_annotations;\n  return (\n    res?.map(({ content_filter_results, ...rest }) => ({\n      ...camelCaseKeys(rest),\n      contentFilterResults: parseContentFilterResultDetailsForPromptOutput(content_filter_results),\n    })) ?? []\n  );\n}\n\nexport function getCompletionsResult(\n  body: CompletionsOutput & ContentFilterResultsForPromptX,\n): Completions {\n  const { created, choices, prompt_filter_results, prompt_annotations, ...rest } = body;\n  return {\n    ...camelCaseKeys(rest),\n    created: new Date(created),\n    promptFilterResults: getContentFilterResultsForPrompt({\n      prompt_filter_results,\n      prompt_annotations,\n    }),\n    choices: choices.map(({ content_filter_results, ...choice }) => ({\n      ...camelCaseKeys(choice),\n      ...(!content_filter_results\n        ? {}\n        : {\n            contentFilterResults: parseContentFilterResultsForChoiceOutput(content_filter_results),\n          }),\n    })),\n  };\n}\n\nexport function getChatCompletionsResult(\n  body: ChatCompletionsOutput & ContentFilterResultsForPromptX,\n): ChatCompletions {\n  const { created, choices, prompt_filter_results, prompt_annotations, ...rest } = body;\n  return {\n    ...camelCaseKeys(rest),\n    created: new Date(created),\n    promptFilterResults: getContentFilterResultsForPrompt({\n      prompt_filter_results,\n      prompt_annotations,\n    }),\n    choices: !choices\n      ? []\n      : choices.map(({ content_filter_results, delta, message, ...choice }) => ({\n          ...camelCaseKeys(choice),\n          ...(!delta ? {} : { delta: parseMessage(delta) }),\n          ...(!message ? {} : { message: parseMessage(message) }),\n          ...(!content_filter_results\n            ? {}\n            : {\n                contentFilterResults:\n                  parseContentFilterResultsForChoiceOutput(content_filter_results),\n              }),\n        })),\n  };\n}\n\nfunction parseMessage(message: ChatResponseMessageOutput): ChatResponseMessage {\n  const { context, tool_calls, ...rest } = message;\n  return {\n    ...camelCaseKeys(rest),\n    toolCalls: tool_calls ?? [],\n    ...(!context\n      ? {}\n      : {\n          context: {\n            ...(!context.messages\n              ? {}\n              : {\n                  messages: context.messages.map(parseMessage),\n                }),\n          },\n        }),\n  };\n}\n\nfunction parseError(error: ErrorModel): { error: ErrorModel } {\n  return {\n    error: {\n      ...error,\n      details: error[\"details\"] ?? [],\n    },\n  };\n}\n\nfunction parseContentFilterResultDetailsForPromptOutput({\n  error,\n  ...rest\n}: ContentFilterResultDetailsForPromptOutput = {}): ContentFilterResultDetailsForPrompt {\n  return error ? parseError(error) : camelCaseKeys(rest);\n}\n\nfunction parseContentFilterResultsForChoiceOutput({\n  error,\n  ...rest\n}: ContentFilterResultsForChoiceOutput = {}): ContentFilterResultsForChoice {\n  return error ? parseError(error) : camelCaseKeys(rest);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}