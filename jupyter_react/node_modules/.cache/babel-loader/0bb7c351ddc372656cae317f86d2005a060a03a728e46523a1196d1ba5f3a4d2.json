{"ast":null,"code":"var _jsxFileName = \"/workspaces/codespaces-blank/jupyter_react/src/components/NERCell.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport * as tf from '@tensorflow/tfjs';\nimport MarkdownCell from './MarkdownCell'; // Import your MarkdownCell component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction NERComponent() {\n  _s();\n  const [model, setModel] = useState(null);\n  const [markdownContent, setMarkdownContent] = useState('');\n  const [entities, setEntities] = useState([]);\n  const [showNERCell, setShowNERCell] = useState(false); // Add this line\n\n  useEffect(() => {\n    const loadModel = async () => {\n      const model = await tf.loadLayersModel('URL_OF_YOUR_MODEL');\n      setModel(model);\n    };\n    loadModel();\n  }, []);\n  const handlePredict = async () => {\n    if (model) {\n      const inputTensor = tf.tensor2d([markdownContent.split(' ').map(word => wordToNumber(word))]); // You need to implement the wordToNumber function\n      const prediction = model.predict(inputTensor);\n      const entities = prediction.dataSync(); // This is a simplified example, you need to transform the prediction to entities\n      setEntities(entities);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(MarkdownCell, {\n      content: markdownContent,\n      onChange: setMarkdownContent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), \"  // Use your MarkdownCell component\", /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handlePredict,\n      children: \"Predict\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setShowNERCell(!showNERCell),\n      children: \"Toggle NERCell\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), \"  // Add this line\", showNERCell &&\n    /*#__PURE__*/\n    // Add this line\n    _jsxDEV(\"ul\", {\n      children: entities.map((entity, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: entity\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n_s(NERComponent, \"/XBp+9I6zHrCqLTb5JNTntxCW/M=\");\n_c = NERComponent;\nexport default NERComponent;\nvar _c;\n$RefreshReg$(_c, \"NERComponent\");","map":{"version":3,"names":["React","useEffect","useState","tf","MarkdownCell","jsxDEV","_jsxDEV","NERComponent","_s","model","setModel","markdownContent","setMarkdownContent","entities","setEntities","showNERCell","setShowNERCell","loadModel","loadLayersModel","handlePredict","inputTensor","tensor2d","split","map","word","wordToNumber","prediction","predict","dataSync","children","content","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","entity","index","_c","$RefreshReg$"],"sources":["/workspaces/codespaces-blank/jupyter_react/src/components/NERCell.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport * as tf from '@tensorflow/tfjs';\nimport MarkdownCell from './MarkdownCell';  // Import your MarkdownCell component\n\nfunction NERComponent() {\n  const [model, setModel] = useState(null);\n  const [markdownContent, setMarkdownContent] = useState('');\n  const [entities, setEntities] = useState([]);\n  const [showNERCell, setShowNERCell] = useState(false);  // Add this line\n\n  useEffect(() => {\n    const loadModel = async () => {\n      const model = await tf.loadLayersModel('URL_OF_YOUR_MODEL');\n      setModel(model);\n    };\n\n    loadModel();\n  }, []);\n\n  const handlePredict = async () => {\n    if (model) {\n      const inputTensor = tf.tensor2d([markdownContent.split(' ').map(word => wordToNumber(word))]);  // You need to implement the wordToNumber function\n      const prediction = model.predict(inputTensor);\n      const entities = prediction.dataSync();  // This is a simplified example, you need to transform the prediction to entities\n      setEntities(entities);\n    }\n  };\n\n  return (\n    <div>\n      <MarkdownCell content={markdownContent} onChange={setMarkdownContent} />  // Use your MarkdownCell component\n      <button onClick={handlePredict}>Predict</button>\n      <button onClick={() => setShowNERCell(!showNERCell)}>Toggle NERCell</button>  // Add this line\n      {showNERCell && (  // Add this line\n        <ul>\n          {entities.map((entity, index) => (\n            <li key={index}>{entity}</li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n}\n\nexport default NERComponent;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAO,KAAKC,EAAE,MAAM,kBAAkB;AACtC,OAAOC,YAAY,MAAM,gBAAgB,CAAC,CAAE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE5C,SAASC,YAAYA,CAAA,EAAG;EAAAC,EAAA;EACtB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACS,eAAe,EAAEC,kBAAkB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACW,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACa,WAAW,EAAEC,cAAc,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAE;;EAExDD,SAAS,CAAC,MAAM;IACd,MAAMgB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,MAAMR,KAAK,GAAG,MAAMN,EAAE,CAACe,eAAe,CAAC,mBAAmB,CAAC;MAC3DR,QAAQ,CAACD,KAAK,CAAC;IACjB,CAAC;IAEDQ,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,MAAME,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAIV,KAAK,EAAE;MACT,MAAMW,WAAW,GAAGjB,EAAE,CAACkB,QAAQ,CAAC,CAACV,eAAe,CAACW,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,IAAI,IAAIC,YAAY,CAACD,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAE;MAChG,MAAME,UAAU,GAAGjB,KAAK,CAACkB,OAAO,CAACP,WAAW,CAAC;MAC7C,MAAMP,QAAQ,GAAGa,UAAU,CAACE,QAAQ,CAAC,CAAC,CAAC,CAAE;MACzCd,WAAW,CAACD,QAAQ,CAAC;IACvB;EACF,CAAC;EAED,oBACEP,OAAA;IAAAuB,QAAA,gBACEvB,OAAA,CAACF,YAAY;MAAC0B,OAAO,EAAEnB,eAAgB;MAACoB,QAAQ,EAAEnB;IAAmB;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,wCACxE,eAAA7B,OAAA;MAAQ8B,OAAO,EAAEjB,aAAc;MAAAU,QAAA,EAAC;IAAO;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAChD7B,OAAA;MAAQ8B,OAAO,EAAEA,CAAA,KAAMpB,cAAc,CAAC,CAACD,WAAW,CAAE;MAAAc,QAAA,EAAC;IAAc;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,sBAC5E,EAACpB,WAAW;IAAA;IAAO;IACjBT,OAAA;MAAAuB,QAAA,EACGhB,QAAQ,CAACU,GAAG,CAAC,CAACc,MAAM,EAAEC,KAAK,kBAC1BhC,OAAA;QAAAuB,QAAA,EAAiBQ;MAAM,GAAdC,KAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAc,CAC7B;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CACL;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAC3B,EAAA,CAtCQD,YAAY;AAAAgC,EAAA,GAAZhC,YAAY;AAwCrB,eAAeA,YAAY;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}