{"ast":null,"code":"var _jsxFileName = \"/workspaces/codespaces-blank/jupyter_react/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport CodeCell from '../src/components/CodeCell';\nimport MarkdownCell from '../src/components/MarkdownCell';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [cells, setCells] = useState([]);\n  const addCell = type => {\n    setCells([...cells, {\n      type,\n      id: Math.random()\n    }]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => addCell('code'),\n      children: \"Add Code Cell\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => addCell('markdown'),\n      children: \"Add Markdown Cell\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this), cells.map(cell => cell.type === 'code' ? /*#__PURE__*/_jsxDEV(CodeCell, {}, cell.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(MarkdownCell, {}, cell.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 11\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"9zjnsC1kUd6PYoVE5KeGE6GzgRE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","CodeCell","MarkdownCell","jsxDEV","_jsxDEV","App","_s","cells","setCells","addCell","type","id","Math","random","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","cell","_c","$RefreshReg$"],"sources":["/workspaces/codespaces-blank/jupyter_react/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport CodeCell from '../src/components/CodeCell';\nimport MarkdownCell from '../src/components/MarkdownCell';\n\nfunction App() {\n  const [cells, setCells] = useState([]);\n\n  const addCell = (type) => {\n    setCells([...cells, { type, id: Math.random() }]);\n  };\n\n  return (\n    <div>\n      <button onClick={() => addCell('code')}>Add Code Cell</button>\n      <button onClick={() => addCell('markdown')}>Add Markdown Cell</button>\n      {cells.map((cell) =>\n        cell.type === 'code' ? (\n          <CodeCell key={cell.id} />\n        ) : (\n          <MarkdownCell key={cell.id} />\n        )\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,QAAQ,MAAM,4BAA4B;AACjD,OAAOC,YAAY,MAAM,gCAAgC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1D,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAMS,OAAO,GAAIC,IAAI,IAAK;IACxBF,QAAQ,CAAC,CAAC,GAAGD,KAAK,EAAE;MAAEG,IAAI;MAAEC,EAAE,EAAEC,IAAI,CAACC,MAAM,CAAC;IAAE,CAAC,CAAC,CAAC;EACnD,CAAC;EAED,oBACET,OAAA;IAAAU,QAAA,gBACEV,OAAA;MAAQW,OAAO,EAAEA,CAAA,KAAMN,OAAO,CAAC,MAAM,CAAE;MAAAK,QAAA,EAAC;IAAa;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC9Df,OAAA;MAAQW,OAAO,EAAEA,CAAA,KAAMN,OAAO,CAAC,UAAU,CAAE;MAAAK,QAAA,EAAC;IAAiB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EACrEZ,KAAK,CAACa,GAAG,CAAEC,IAAI,IACdA,IAAI,CAACX,IAAI,KAAK,MAAM,gBAClBN,OAAA,CAACH,QAAQ,MAAMoB,IAAI,CAACV,EAAE;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,gBAE1Bf,OAAA,CAACF,YAAY,MAAMmB,IAAI,CAACV,EAAE;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAEjC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACb,EAAA,CApBQD,GAAG;AAAAiB,EAAA,GAAHjB,GAAG;AAsBZ,eAAeA,GAAG;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}