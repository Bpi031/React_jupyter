{"ast":null,"code":"var _jsxFileName = \"/workspaces/codespaces-blank/jupyter_react/src/components/MarkdownCell.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport AceEditor from 'react-ace';\nimport { marked } from 'marked';\nimport 'ace-builds/src-noconflict/mode-markdown';\nimport 'ace-builds/src-noconflict/theme-monokai';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MarkdownCell = () => {\n  _s();\n  const [markdown, setMarkdown] = useState('');\n  const [html, setHtml] = useState('');\n  const [lines, setLines] = useState(3); // initial minLines\n\n  const handleConvert = () => {\n    const convertedHtml = marked(markdown);\n    setHtml(convertedHtml);\n\n    // Update lines based on the number of '\\n' in the markdown\n    const newLines = markdown.split('\\n').length;\n    setLines(newLines > 3 ? newLines : 3); // ensure minLines is 3\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(AceEditor, {\n      mode: \"markdown\",\n      theme: \"monokai\",\n      onChange: setMarkdown,\n      name: \"UNIQUE_ID_OF_DIV\",\n      editorProps: {\n        $blockScrolling: true\n      },\n      minLines: 3,\n      maxLines: lines,\n      height: `${lines * 16}px` // assuming each line is 16px\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleConvert,\n      children: \"Convert\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      dangerouslySetInnerHTML: {\n        __html: html\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 9\n  }, this);\n};\n_s(MarkdownCell, \"/5hGLHXYQok6sXXr1VIbXXX5vPE=\");\n_c = MarkdownCell;\nexport default MarkdownCell;\nvar _c;\n$RefreshReg$(_c, \"MarkdownCell\");","map":{"version":3,"names":["React","useState","AceEditor","marked","jsxDEV","_jsxDEV","MarkdownCell","_s","markdown","setMarkdown","html","setHtml","lines","setLines","handleConvert","convertedHtml","newLines","split","length","children","mode","theme","onChange","name","editorProps","$blockScrolling","minLines","maxLines","height","fileName","_jsxFileName","lineNumber","columnNumber","onClick","dangerouslySetInnerHTML","__html","_c","$RefreshReg$"],"sources":["/workspaces/codespaces-blank/jupyter_react/src/components/MarkdownCell.js"],"sourcesContent":["import React, { useState } from 'react';\nimport AceEditor from 'react-ace';\nimport { marked } from 'marked';\nimport 'ace-builds/src-noconflict/mode-markdown';\nimport 'ace-builds/src-noconflict/theme-monokai';\n\nconst MarkdownCell = () => {\n    const [markdown, setMarkdown] = useState('');\n    const [html, setHtml] = useState('');\n    const [lines, setLines] = useState(3); // initial minLines\n\n    const handleConvert = () => {\n        const convertedHtml = marked(markdown);\n        setHtml(convertedHtml);\n\n        // Update lines based on the number of '\\n' in the markdown\n        const newLines = markdown.split('\\n').length;\n        setLines(newLines > 3 ? newLines : 3); // ensure minLines is 3\n    };\n\n    return (\n        <div>\n            <AceEditor\n                mode=\"markdown\"\n                theme=\"monokai\"\n                onChange={setMarkdown}\n                name=\"UNIQUE_ID_OF_DIV\"\n                editorProps={{ $blockScrolling: true }}\n                minLines={3}\n                maxLines={lines}\n                height={`${lines * 16}px`} // assuming each line is 16px\n            />\n            <button onClick={handleConvert}>\n                Convert\n            </button>\n            <div dangerouslySetInnerHTML={{ __html: html }} />\n        </div>\n    );\n}\n\nexport default MarkdownCell;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,SAAS,MAAM,WAAW;AACjC,SAASC,MAAM,QAAQ,QAAQ;AAC/B,OAAO,yCAAyC;AAChD,OAAO,yCAAyC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACS,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;;EAEvC,MAAMa,aAAa,GAAGA,CAAA,KAAM;IACxB,MAAMC,aAAa,GAAGZ,MAAM,CAACK,QAAQ,CAAC;IACtCG,OAAO,CAACI,aAAa,CAAC;;IAEtB;IACA,MAAMC,QAAQ,GAAGR,QAAQ,CAACS,KAAK,CAAC,IAAI,CAAC,CAACC,MAAM;IAC5CL,QAAQ,CAACG,QAAQ,GAAG,CAAC,GAAGA,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC;EAC3C,CAAC;EAED,oBACIX,OAAA;IAAAc,QAAA,gBACId,OAAA,CAACH,SAAS;MACNkB,IAAI,EAAC,UAAU;MACfC,KAAK,EAAC,SAAS;MACfC,QAAQ,EAAEb,WAAY;MACtBc,IAAI,EAAC,kBAAkB;MACvBC,WAAW,EAAE;QAAEC,eAAe,EAAE;MAAK,CAAE;MACvCC,QAAQ,EAAE,CAAE;MACZC,QAAQ,EAAEf,KAAM;MAChBgB,MAAM,EAAG,GAAEhB,KAAK,GAAG,EAAG,IAAI,CAAC;IAAA;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9B,CAAC,eACF3B,OAAA;MAAQ4B,OAAO,EAAEnB,aAAc;MAAAK,QAAA,EAAC;IAEhC;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACT3B,OAAA;MAAK6B,uBAAuB,EAAE;QAAEC,MAAM,EAAEzB;MAAK;IAAE;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjD,CAAC;AAEd,CAAC;AAAAzB,EAAA,CAhCKD,YAAY;AAAA8B,EAAA,GAAZ9B,YAAY;AAkClB,eAAeA,YAAY;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}