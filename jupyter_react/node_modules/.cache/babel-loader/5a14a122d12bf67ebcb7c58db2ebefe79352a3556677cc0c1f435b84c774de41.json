{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * The OpenAIKeyCredential class represents an OpenAI API key\n * and is used to authenticate into an OpenAI client for\n * an OpenAI endpoint.\n */\nexport class OpenAIKeyCredential {\n  /**\n   * Create an instance of an AzureKeyCredential for use\n   * with a service client.\n   *\n   * @param key - The initial value of the key to use in authentication\n   */\n  constructor(key) {\n    if (!key) {\n      throw new Error(\"key must be a non-empty string\");\n    }\n    this._key = createKey(key);\n  }\n  /**\n   * The value of the key to be used in authentication\n   */\n  get key() {\n    return this._key;\n  }\n  /**\n   * Change the value of the key.\n   *\n   * Updates will take effect upon the next request after\n   * updating the key value.\n   *\n   * @param newKey - The new key value to be used\n   */\n  update(newKey) {\n    this._key = createKey(newKey);\n  }\n}\nfunction createKey(key) {\n  return key.startsWith(\"Bearer \") ? key : `Bearer ${key}`;\n}","map":{"version":3,"names":["OpenAIKeyCredential","constructor","key","Error","_key","createKey","update","newKey","startsWith"],"sources":["/workspaces/codespaces-blank/jupyter_react/node_modules/@azure/openai/src/OpenAIKeyCredential.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * THIS IS AN AUTO-GENERATED FILE - DO NOT EDIT!\n *\n * Any changes you make here may be lost.\n *\n * If you need to make changes, please do so in the original source file, \\{project-root\\}/sources/custom\n */\n\nimport { KeyCredential } from \"@azure/core-auth\";\n\n/**\n * The OpenAIKeyCredential class represents an OpenAI API key\n * and is used to authenticate into an OpenAI client for\n * an OpenAI endpoint.\n */\nexport class OpenAIKeyCredential implements KeyCredential {\n  private _key: string;\n\n  /**\n   * Create an instance of an AzureKeyCredential for use\n   * with a service client.\n   *\n   * @param key - The initial value of the key to use in authentication\n   */\n  constructor(key: string) {\n    if (!key) {\n      throw new Error(\"key must be a non-empty string\");\n    }\n\n    this._key = createKey(key);\n  }\n\n  /**\n   * The value of the key to be used in authentication\n   */\n  public get key(): string {\n    return this._key;\n  }\n\n  /**\n   * Change the value of the key.\n   *\n   * Updates will take effect upon the next request after\n   * updating the key value.\n   *\n   * @param newKey - The new key value to be used\n   */\n  public update(newKey: string): void {\n    this._key = createKey(newKey);\n  }\n}\n\nfunction createKey(key: string): string {\n  return key.startsWith(\"Bearer \") ? key : `Bearer ${key}`;\n}\n"],"mappings":"AAAA;AACA;AAYA;;;;;AAKA,OAAM,MAAOA,mBAAmB;EAG9B;;;;;;EAMAC,YAAYC,GAAW;IACrB,IAAI,CAACA,GAAG,EAAE;MACR,MAAM,IAAIC,KAAK,CAAC,gCAAgC,CAAC;IACnD;IAEA,IAAI,CAACC,IAAI,GAAGC,SAAS,CAACH,GAAG,CAAC;EAC5B;EAEA;;;EAGA,IAAWA,GAAGA,CAAA;IACZ,OAAO,IAAI,CAACE,IAAI;EAClB;EAEA;;;;;;;;EAQOE,MAAMA,CAACC,MAAc;IAC1B,IAAI,CAACH,IAAI,GAAGC,SAAS,CAACE,MAAM,CAAC;EAC/B;;AAGF,SAASF,SAASA,CAACH,GAAW;EAC5B,OAAOA,GAAG,CAACM,UAAU,CAAC,SAAS,CAAC,GAAGN,GAAG,GAAG,UAAUA,GAAG,EAAE;AAC1D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}