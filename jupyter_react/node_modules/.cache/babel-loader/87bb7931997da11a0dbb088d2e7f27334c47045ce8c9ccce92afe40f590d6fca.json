{"ast":null,"code":"var _jsxFileName = \"/workspaces/codespaces-blank/jupyter_react/src/components/CodeCell.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext } from 'react';\nimport AceEditor from 'react-ace';\nimport 'ace-builds/src-noconflict/mode-python';\nimport 'ace-builds/src-noconflict/theme-monokai';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CodeCell() {\n  _s();\n  const [code, setCode] = useState('');\n  const [output, setOutput] = useState('');\n  const [image, setImage] = useState(null);\n  const socket = useContext(KernelContext);\n  useEffect(() => {\n    if (socket) {\n      socket.onmessage = message => {\n        const data = JSON.parse(message.data);\n        if (data.header.msg_type === 'execute_result' || data.header.msg_type === 'stream') {\n          setOutput(prevOutput => prevOutput + '\\n' + data.content.text);\n        } else if (data.header.msg_type === 'display_data') {\n          setImage(data.content.data['image/png']);\n        }\n      };\n    }\n  }, [socket]);\n  const handleExecute = () => {\n    if (socket && socket.readyState === 1) {\n      const executeMessage = {\n        header: {\n          msg_id: `execute_${Date.now()}`,\n          msg_type: 'execute_request',\n          username: '',\n          session: ''\n        },\n        parent_header: {},\n        metadata: {},\n        content: {\n          code,\n          silent: false,\n          store_history: true,\n          user_expressions: {},\n          allow_stdin: false\n        }\n      };\n      socket.send(JSON.stringify(executeMessage));\n    } else {\n      console.error('WebSocket is not open: readyState ', socket.readyState);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(AceEditor, {\n      mode: \"python\",\n      theme: \"monokai\",\n      onChange: setCode,\n      name: \"UNIQUE_ID_OF_DIV\",\n      editorProps: {\n        $blockScrolling: true\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleExecute,\n      disabled: !socket,\n      children: \"Run\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: output\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), image && /*#__PURE__*/_jsxDEV(\"img\", {\n      src: `data:image/png;base64,${image}`,\n      alt: \"plot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n_s(CodeCell, \"/2fnik3k3xJWfQYYfCFEx4ZiFjw=\");\n_c = CodeCell;\nexport default CodeCell;\nvar _c;\n$RefreshReg$(_c, \"CodeCell\");","map":{"version":3,"names":["React","useState","useEffect","useContext","AceEditor","jsxDEV","_jsxDEV","CodeCell","_s","code","setCode","output","setOutput","image","setImage","socket","KernelContext","onmessage","message","data","JSON","parse","header","msg_type","prevOutput","content","text","handleExecute","readyState","executeMessage","msg_id","Date","now","username","session","parent_header","metadata","silent","store_history","user_expressions","allow_stdin","send","stringify","console","error","children","mode","theme","onChange","name","editorProps","$blockScrolling","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","src","alt","_c","$RefreshReg$"],"sources":["/workspaces/codespaces-blank/jupyter_react/src/components/CodeCell.js"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport AceEditor from 'react-ace';\n\nimport 'ace-builds/src-noconflict/mode-python';\nimport 'ace-builds/src-noconflict/theme-monokai';\n\n\nfunction CodeCell() {\n  const [code, setCode] = useState('');\n  const [output, setOutput] = useState('');\n  const [image, setImage] = useState(null);\n  const socket = useContext(KernelContext);\n\n  useEffect(() => {\n    if (socket) {\n      socket.onmessage = (message) => {\n        const data = JSON.parse(message.data);\n        if (data.header.msg_type === 'execute_result' || data.header.msg_type === 'stream') {\n          setOutput(prevOutput => prevOutput + '\\n' + data.content.text);\n        } else if (data.header.msg_type === 'display_data') {\n          setImage(data.content.data['image/png']);\n        }\n      };\n    }\n  }, [socket]);\n\n  const handleExecute = () => {\n    if (socket && socket.readyState === 1) {\n      const executeMessage = {\n        header: {\n          msg_id: `execute_${Date.now()}`,\n          msg_type: 'execute_request',\n          username: '',\n          session: '',\n        },\n        parent_header: {},\n        metadata: {},  \n        content: {\n          code,\n          silent: false,\n          store_history: true,\n          user_expressions: {},\n          allow_stdin: false,\n        },\n      };\n      socket.send(JSON.stringify(executeMessage));\n    } else {\n      console.error('WebSocket is not open: readyState ', socket.readyState);\n    }\n  };\n\n  return (\n    <div>\n      <AceEditor\n        mode=\"python\"\n        theme=\"monokai\"\n        onChange={setCode}\n        name=\"UNIQUE_ID_OF_DIV\"\n        editorProps={{ $blockScrolling: true }}\n      />\n      <button onClick={handleExecute} disabled={!socket}>\n        Run\n      </button>\n      <pre>{output}</pre>\n      {image && <img src={`data:image/png;base64,${image}`} alt=\"plot\" />}\n    </div>\n  );\n}\n\nexport default CodeCell;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}