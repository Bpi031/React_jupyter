{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nconst responseMap = {\n  \"POST /deployments/{deploymentId}/audio/transcriptions\": [\"200\"],\n  \"POST /deployments/{deploymentId}/audio/translations\": [\"200\"],\n  \"POST /deployments/{deploymentId}/completions\": [\"200\"],\n  \"POST /deployments/{deploymentId}/chat/completions\": [\"200\"],\n  \"POST /deployments/{deploymentId}/extensions/chat/completions\": [\"200\"],\n  \"POST /deployments/{deploymentId}/images/generations\": [\"200\"],\n  \"POST /deployments/{deploymentId}/embeddings\": [\"200\"],\n  \"GET /operations/images/{operationId}\": [\"200\"],\n  \"POST /images/generations:submit\": [\"202\"],\n  \"GET /images/generations:submit\": [\"200\", \"202\"]\n};\nexport function isUnexpected(response) {\n  const lroOriginal = response.headers[\"x-ms-original-url\"];\n  const url = new URL(lroOriginal !== null && lroOriginal !== void 0 ? lroOriginal : response.request.url);\n  const method = response.request.method;\n  let pathDetails = responseMap[`${method} ${url.pathname}`];\n  if (!pathDetails) {\n    pathDetails = getParametrizedPathSuccess(method, url.pathname);\n  }\n  return !pathDetails.includes(response.status);\n}\nfunction getParametrizedPathSuccess(method, path) {\n  var _a, _b, _c, _d;\n  const pathParts = path.split(\"/\");\n  // Traverse list to match the longest candidate\n  // matchedLen: the length of candidate path\n  // matchedValue: the matched status code array\n  let matchedLen = -1,\n    matchedValue = [];\n  // Iterate the responseMap to find a match\n  for (const [key, value] of Object.entries(responseMap)) {\n    // Extracting the path from the map key which is in format\n    // GET /path/foo\n    if (!key.startsWith(method)) {\n      continue;\n    }\n    const candidatePath = getPathFromMapKey(key);\n    // Get each part of the url path\n    const candidateParts = candidatePath.split(\"/\");\n    // track if we have found a match to return the values found.\n    let found = true;\n    for (let i = candidateParts.length - 1, j = pathParts.length - 1; i >= 1 && j >= 1; i--, j--) {\n      if (((_a = candidateParts[i]) === null || _a === void 0 ? void 0 : _a.startsWith(\"{\")) && ((_b = candidateParts[i]) === null || _b === void 0 ? void 0 : _b.indexOf(\"}\")) !== -1) {\n        const start = candidateParts[i].indexOf(\"}\") + 1,\n          end = (_c = candidateParts[i]) === null || _c === void 0 ? void 0 : _c.length;\n        // If the current part of the candidate is a \"template\" part\n        // Try to use the suffix of pattern to match the path\n        // {guid} ==> $\n        // {guid}:export ==> :export$\n        const isMatched = new RegExp(`${(_d = candidateParts[i]) === null || _d === void 0 ? void 0 : _d.slice(start, end)}`).test(pathParts[j] || \"\");\n        if (!isMatched) {\n          found = false;\n          break;\n        }\n        continue;\n      }\n      // If the candidate part is not a template and\n      // the parts don't match mark the candidate as not found\n      // to move on with the next candidate path.\n      if (candidateParts[i] !== pathParts[j]) {\n        found = false;\n        break;\n      }\n    }\n    // We finished evaluating the current candidate parts\n    // Update the matched value if and only if we found the longer pattern\n    if (found && candidatePath.length > matchedLen) {\n      matchedLen = candidatePath.length;\n      matchedValue = value;\n    }\n  }\n  return matchedValue;\n}\nfunction getPathFromMapKey(mapKey) {\n  const pathStart = mapKey.indexOf(\"/\");\n  return mapKey.slice(pathStart);\n}","map":{"version":3,"names":["responseMap","isUnexpected","response","lroOriginal","headers","url","URL","request","method","pathDetails","pathname","getParametrizedPathSuccess","includes","status","path","pathParts","split","matchedLen","matchedValue","key","value","Object","entries","startsWith","candidatePath","getPathFromMapKey","candidateParts","found","i","length","j","_a","_b","indexOf","start","end","_c","isMatched","RegExp","_d","slice","test","mapKey","pathStart"],"sources":["/workspaces/codespaces-blank/jupyter_react/node_modules/@azure/openai/src/rest/isUnexpected.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * THIS IS AN AUTO-GENERATED FILE - DO NOT EDIT!\n *\n * Any changes you make here may be lost.\n *\n * If you need to make changes, please do so in the original source file, \\{project-root\\}/sources/custom\n */\n\nimport {\n  GetAudioTranscriptionAsPlainText200Response,\n  GetAudioTranscriptionAsResponseObject200Response,\n  GetAudioTranscriptionAsPlainTextDefaultResponse,\n  GetAudioTranslationAsPlainText200Response,\n  GetAudioTranslationAsResponseObject200Response,\n  GetAudioTranslationAsPlainTextDefaultResponse,\n  GetCompletions200Response,\n  GetCompletionsDefaultResponse,\n  GetChatCompletions200Response,\n  GetChatCompletionsDefaultResponse,\n  GetChatCompletionsWithAzureExtensions200Response,\n  GetChatCompletionsWithAzureExtensionsDefaultResponse,\n  GetImageGenerations200Response,\n  GetImageGenerationsDefaultResponse,\n  GetEmbeddings200Response,\n  GetEmbeddingsDefaultResponse,\n  GetAzureBatchImageGenerationOperationStatus200Response,\n  GetAzureBatchImageGenerationOperationStatusDefaultResponse,\n  BeginAzureBatchImageGeneration202Response,\n  BeginAzureBatchImageGenerationLogicalResponse,\n  BeginAzureBatchImageGenerationDefaultResponse,\n} from \"./responses.js\";\n\nconst responseMap: Record<string, string[]> = {\n  \"POST /deployments/{deploymentId}/audio/transcriptions\": [\"200\"],\n  \"POST /deployments/{deploymentId}/audio/translations\": [\"200\"],\n  \"POST /deployments/{deploymentId}/completions\": [\"200\"],\n  \"POST /deployments/{deploymentId}/chat/completions\": [\"200\"],\n  \"POST /deployments/{deploymentId}/extensions/chat/completions\": [\"200\"],\n  \"POST /deployments/{deploymentId}/images/generations\": [\"200\"],\n  \"POST /deployments/{deploymentId}/embeddings\": [\"200\"],\n  \"GET /operations/images/{operationId}\": [\"200\"],\n  \"POST /images/generations:submit\": [\"202\"],\n  \"GET /images/generations:submit\": [\"200\", \"202\"],\n};\n\nexport function isUnexpected(\n  response:\n    | GetAudioTranscriptionAsPlainText200Response\n    | GetAudioTranscriptionAsResponseObject200Response\n    | GetAudioTranscriptionAsPlainTextDefaultResponse,\n): response is GetAudioTranscriptionAsPlainTextDefaultResponse;\nexport function isUnexpected(\n  response:\n    | GetAudioTranslationAsPlainText200Response\n    | GetAudioTranslationAsResponseObject200Response\n    | GetAudioTranslationAsPlainTextDefaultResponse,\n): response is GetAudioTranslationAsPlainTextDefaultResponse;\nexport function isUnexpected(\n  response: GetCompletions200Response | GetCompletionsDefaultResponse,\n): response is GetCompletionsDefaultResponse;\nexport function isUnexpected(\n  response: GetChatCompletions200Response | GetChatCompletionsDefaultResponse,\n): response is GetChatCompletionsDefaultResponse;\nexport function isUnexpected(\n  response:\n    | GetChatCompletionsWithAzureExtensions200Response\n    | GetChatCompletionsWithAzureExtensionsDefaultResponse,\n): response is GetChatCompletionsWithAzureExtensionsDefaultResponse;\nexport function isUnexpected(\n  response: GetImageGenerations200Response | GetImageGenerationsDefaultResponse,\n): response is GetImageGenerationsDefaultResponse;\nexport function isUnexpected(\n  response: GetEmbeddings200Response | GetEmbeddingsDefaultResponse,\n): response is GetEmbeddingsDefaultResponse;\nexport function isUnexpected(\n  response:\n    | GetAzureBatchImageGenerationOperationStatus200Response\n    | GetAzureBatchImageGenerationOperationStatusDefaultResponse,\n): response is GetAzureBatchImageGenerationOperationStatusDefaultResponse;\nexport function isUnexpected(\n  response:\n    | BeginAzureBatchImageGeneration202Response\n    | BeginAzureBatchImageGenerationLogicalResponse\n    | BeginAzureBatchImageGenerationDefaultResponse,\n): response is BeginAzureBatchImageGenerationDefaultResponse;\nexport function isUnexpected(\n  response:\n    | GetAudioTranscriptionAsPlainText200Response\n    | GetAudioTranscriptionAsResponseObject200Response\n    | GetAudioTranscriptionAsPlainTextDefaultResponse\n    | GetAudioTranslationAsPlainText200Response\n    | GetAudioTranslationAsResponseObject200Response\n    | GetAudioTranslationAsPlainTextDefaultResponse\n    | GetCompletions200Response\n    | GetCompletionsDefaultResponse\n    | GetChatCompletions200Response\n    | GetChatCompletionsDefaultResponse\n    | GetChatCompletionsWithAzureExtensions200Response\n    | GetChatCompletionsWithAzureExtensionsDefaultResponse\n    | GetImageGenerations200Response\n    | GetImageGenerationsDefaultResponse\n    | GetEmbeddings200Response\n    | GetEmbeddingsDefaultResponse\n    | GetAzureBatchImageGenerationOperationStatus200Response\n    | GetAzureBatchImageGenerationOperationStatusDefaultResponse\n    | BeginAzureBatchImageGeneration202Response\n    | BeginAzureBatchImageGenerationLogicalResponse\n    | BeginAzureBatchImageGenerationDefaultResponse,\n): response is\n  | GetAudioTranscriptionAsPlainTextDefaultResponse\n  | GetAudioTranslationAsPlainTextDefaultResponse\n  | GetCompletionsDefaultResponse\n  | GetChatCompletionsDefaultResponse\n  | GetChatCompletionsWithAzureExtensionsDefaultResponse\n  | GetImageGenerationsDefaultResponse\n  | GetEmbeddingsDefaultResponse\n  | GetAzureBatchImageGenerationOperationStatusDefaultResponse\n  | BeginAzureBatchImageGenerationDefaultResponse {\n  const lroOriginal = response.headers[\"x-ms-original-url\"];\n  const url = new URL(lroOriginal ?? response.request.url);\n  const method = response.request.method;\n  let pathDetails = responseMap[`${method} ${url.pathname}`];\n  if (!pathDetails) {\n    pathDetails = getParametrizedPathSuccess(method, url.pathname);\n  }\n  return !pathDetails.includes(response.status);\n}\n\nfunction getParametrizedPathSuccess(method: string, path: string): string[] {\n  const pathParts = path.split(\"/\");\n\n  // Traverse list to match the longest candidate\n  // matchedLen: the length of candidate path\n  // matchedValue: the matched status code array\n  let matchedLen = -1,\n    matchedValue: string[] = [];\n\n  // Iterate the responseMap to find a match\n  for (const [key, value] of Object.entries(responseMap)) {\n    // Extracting the path from the map key which is in format\n    // GET /path/foo\n    if (!key.startsWith(method)) {\n      continue;\n    }\n    const candidatePath = getPathFromMapKey(key);\n    // Get each part of the url path\n    const candidateParts = candidatePath.split(\"/\");\n\n    // track if we have found a match to return the values found.\n    let found = true;\n    for (let i = candidateParts.length - 1, j = pathParts.length - 1; i >= 1 && j >= 1; i--, j--) {\n      if (candidateParts[i]?.startsWith(\"{\") && candidateParts[i]?.indexOf(\"}\") !== -1) {\n        const start = candidateParts[i]!.indexOf(\"}\") + 1,\n          end = candidateParts[i]?.length;\n        // If the current part of the candidate is a \"template\" part\n        // Try to use the suffix of pattern to match the path\n        // {guid} ==> $\n        // {guid}:export ==> :export$\n        const isMatched = new RegExp(`${candidateParts[i]?.slice(start, end)}`).test(\n          pathParts[j] || \"\",\n        );\n\n        if (!isMatched) {\n          found = false;\n          break;\n        }\n        continue;\n      }\n\n      // If the candidate part is not a template and\n      // the parts don't match mark the candidate as not found\n      // to move on with the next candidate path.\n      if (candidateParts[i] !== pathParts[j]) {\n        found = false;\n        break;\n      }\n    }\n\n    // We finished evaluating the current candidate parts\n    // Update the matched value if and only if we found the longer pattern\n    if (found && candidatePath.length > matchedLen) {\n      matchedLen = candidatePath.length;\n      matchedValue = value;\n    }\n  }\n\n  return matchedValue;\n}\n\nfunction getPathFromMapKey(mapKey: string): string {\n  const pathStart = mapKey.indexOf(\"/\");\n  return mapKey.slice(pathStart);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}