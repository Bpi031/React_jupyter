{"ast":null,"code":"var _jsxFileName = \"/workspaces/codespaces-blank/jupyter_react/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport CodeCell from '../src/components/CodeCell';\nimport MarkdownCell from '../src/components/MarkdownCell';\nimport CopilotCell from './components/CopilotCell';\nimport FileUpload from './components/FileUpLoad';\nimport { KernelManager } from './components/KernelProvide';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [cells, setCells] = useState([]);\n  const addCell = type => {\n    setCells([...cells, {\n      type,\n      id: Math.random()\n    }]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(FileUpload, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => addCell('code'),\n      children: \"Add Code Cell\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => addCell('markdown'),\n      children: \"Add Markdown Cell\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => addCell('ner'),\n      children: \"Add NER Cell\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(KernelManager, {\n      children: cells.map(cell => cell.type === 'code' ? /*#__PURE__*/_jsxDEV(CodeCell, {}, cell.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 13\n      }, this) : cell.type === 'markdown' ? /*#__PURE__*/_jsxDEV(MarkdownCell, {}, cell.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(CopilotCell, {}, cell.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"9zjnsC1kUd6PYoVE5KeGE6GzgRE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","CodeCell","MarkdownCell","CopilotCell","FileUpload","KernelManager","jsxDEV","_jsxDEV","App","_s","cells","setCells","addCell","type","id","Math","random","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","cell","_c","$RefreshReg$"],"sources":["/workspaces/codespaces-blank/jupyter_react/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport CodeCell from '../src/components/CodeCell';\nimport MarkdownCell from '../src/components/MarkdownCell';\nimport CopilotCell from './components/CopilotCell';\nimport FileUpload from './components/FileUpLoad';\nimport { KernelManager } from './components/KernelProvide';\n\nfunction App() {\n  const [cells, setCells] = useState([]);\n\n  const addCell = (type) => {\n    setCells([...cells, { type, id: Math.random() }]);\n  };\n\n  return (\n    <div>\n      <FileUpload />\n      <button onClick={() => addCell('code')}>Add Code Cell</button>\n      <button onClick={() => addCell('markdown')}>Add Markdown Cell</button>\n      <button onClick={() => addCell('ner')}>Add NER Cell</button>\n      <KernelManager>\n        {cells.map((cell) =>\n          cell.type === 'code' ? (\n            <CodeCell key={cell.id} />\n          ) : cell.type === 'markdown' ? (\n            <MarkdownCell key={cell.id} />\n          ) : (\n            <CopilotCell key={cell.id} />\n          )\n        )}\n      </KernelManager>\n      \n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,QAAQ,MAAM,4BAA4B;AACjD,OAAOC,YAAY,MAAM,gCAAgC;AACzD,OAAOC,WAAW,MAAM,0BAA0B;AAClD,OAAOC,UAAU,MAAM,yBAAyB;AAChD,SAASC,aAAa,QAAQ,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3D,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAMY,OAAO,GAAIC,IAAI,IAAK;IACxBF,QAAQ,CAAC,CAAC,GAAGD,KAAK,EAAE;MAAEG,IAAI;MAAEC,EAAE,EAAEC,IAAI,CAACC,MAAM,CAAC;IAAE,CAAC,CAAC,CAAC;EACnD,CAAC;EAED,oBACET,OAAA;IAAAU,QAAA,gBACEV,OAAA,CAACH,UAAU;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACdd,OAAA;MAAQe,OAAO,EAAEA,CAAA,KAAMV,OAAO,CAAC,MAAM,CAAE;MAAAK,QAAA,EAAC;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC9Dd,OAAA;MAAQe,OAAO,EAAEA,CAAA,KAAMV,OAAO,CAAC,UAAU,CAAE;MAAAK,QAAA,EAAC;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACtEd,OAAA;MAAQe,OAAO,EAAEA,CAAA,KAAMV,OAAO,CAAC,KAAK,CAAE;MAAAK,QAAA,EAAC;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC5Dd,OAAA,CAACF,aAAa;MAAAY,QAAA,EACXP,KAAK,CAACa,GAAG,CAAEC,IAAI,IACdA,IAAI,CAACX,IAAI,KAAK,MAAM,gBAClBN,OAAA,CAACN,QAAQ,MAAMuB,IAAI,CAACV,EAAE;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,GACxBG,IAAI,CAACX,IAAI,KAAK,UAAU,gBAC1BN,OAAA,CAACL,YAAY,MAAMsB,IAAI,CAACV,EAAE;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,gBAE9Bd,OAAA,CAACJ,WAAW,MAAMqB,IAAI,CAACV,EAAE;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAEhC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACY,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEb,CAAC;AAEV;AAACZ,EAAA,CA3BQD,GAAG;AAAAiB,EAAA,GAAHjB,GAAG;AA6BZ,eAAeA,GAAG;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}