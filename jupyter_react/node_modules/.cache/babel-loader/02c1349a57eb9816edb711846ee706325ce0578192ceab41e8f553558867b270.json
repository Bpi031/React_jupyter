{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { getStream } from \"./getSSEs.js\";\nimport { wrapError } from \"./util.js\";\nimport { createSseStream } from \"@azure/core-sse\";\nimport { polyfillStream } from \"./readableStreamUtils.js\";\nexport async function getOaiSSEs(response, toEvent) {\n  const stringStream = await getStream(response);\n  const eventStream = createSseStream(stringStream);\n  const jsonParser = new TransformStream({\n    transform: async (chunk, controller) => {\n      if (chunk.data === \"[DONE]\") {\n        return;\n      }\n      controller.enqueue(toEvent(wrapError(() => JSON.parse(chunk.data), \"Error parsing an event. See 'cause' for more details\")));\n    }\n  });\n  /** TODO: remove these polyfills once all supported runtimes support them */\n  return polyfillStream(eventStream.pipeThrough(jsonParser));\n}","map":{"version":3,"names":["getStream","wrapError","createSseStream","polyfillStream","getOaiSSEs","response","toEvent","stringStream","eventStream","jsonParser","TransformStream","transform","chunk","controller","data","enqueue","JSON","parse","pipeThrough"],"sources":["/workspaces/codespaces-blank/jupyter_react/node_modules/@azure/openai/src/api/oaiSse.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * THIS IS AN AUTO-GENERATED FILE - DO NOT EDIT!\n *\n * Any changes you make here may be lost.\n *\n * If you need to make changes, please do so in the original source file, \\{project-root\\}/sources/custom\n */\n\nimport { StreamableMethod } from \"@azure-rest/core-client\";\nimport { getStream } from \"./getSSEs.js\";\nimport { wrapError } from \"./util.js\";\nimport { EventStream } from \"../models/models.js\";\nimport { EventMessage, createSseStream } from \"@azure/core-sse\";\nimport { polyfillStream } from \"./readableStreamUtils.js\";\n\nexport async function getOaiSSEs<TEvent, O extends Record<string, any>>(\n  response: StreamableMethod<unknown>,\n  toEvent: (obj: O) => TEvent,\n): Promise<EventStream<TEvent>> {\n  const stringStream = await getStream(response);\n  const eventStream = createSseStream(stringStream);\n  const jsonParser = new TransformStream<EventMessage, TEvent>({\n    transform: async (chunk, controller) => {\n      if (chunk.data === \"[DONE]\") {\n        return;\n      }\n      controller.enqueue(\n        toEvent(\n          wrapError(\n            () => JSON.parse(chunk.data),\n            \"Error parsing an event. See 'cause' for more details\",\n          ),\n        ),\n      );\n    },\n  });\n  /** TODO: remove these polyfills once all supported runtimes support them */\n  return polyfillStream(eventStream.pipeThrough(jsonParser));\n}\n"],"mappings":"AAAA;AACA;AAWA,SAASA,SAAS,QAAQ,cAAc;AACxC,SAASC,SAAS,QAAQ,WAAW;AAErC,SAAuBC,eAAe,QAAQ,iBAAiB;AAC/D,SAASC,cAAc,QAAQ,0BAA0B;AAEzD,OAAO,eAAeC,UAAUA,CAC9BC,QAAmC,EACnCC,OAA2B;EAE3B,MAAMC,YAAY,GAAG,MAAMP,SAAS,CAACK,QAAQ,CAAC;EAC9C,MAAMG,WAAW,GAAGN,eAAe,CAACK,YAAY,CAAC;EACjD,MAAME,UAAU,GAAG,IAAIC,eAAe,CAAuB;IAC3DC,SAAS,EAAE,MAAAA,CAAOC,KAAK,EAAEC,UAAU,KAAI;MACrC,IAAID,KAAK,CAACE,IAAI,KAAK,QAAQ,EAAE;QAC3B;MACF;MACAD,UAAU,CAACE,OAAO,CAChBT,OAAO,CACLL,SAAS,CACP,MAAMe,IAAI,CAACC,KAAK,CAACL,KAAK,CAACE,IAAI,CAAC,EAC5B,sDAAsD,CACvD,CACF,CACF;IACH;GACD,CAAC;EACF;EACA,OAAOX,cAAc,CAACK,WAAW,CAACU,WAAW,CAACT,UAAU,CAAC,CAAC;AAC5D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}