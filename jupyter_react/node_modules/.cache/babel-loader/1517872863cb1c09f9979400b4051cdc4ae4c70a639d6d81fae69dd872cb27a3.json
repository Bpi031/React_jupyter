{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * THIS IS AN AUTO-GENERATED FILE - DO NOT EDIT!\n *\n * Any changes you make here may be lost.\n *\n * If you need to make changes, please do so in the original source file, \\{project-root\\}/sources/custom\n */\nimport { getClient } from \"@azure-rest/core-client\";\nimport { logger } from \"../logger.js\";\n/**\n * Initialize a new instance of `OpenAIContext`\n * @param endpoint - Supported Cognitive Services endpoints (protocol and hostname, for example:\n * https://westus.api.cognitive.microsoft.com).\n * @param credentials - uniquely identify client credential\n * @param options - the parameter for all optional parameters\n */\nexport default function createClient(endpoint, credentials, options = {}) {\n  var _a, _b, _c, _d, _e, _f, _g, _h;\n  const baseUrl = (_a = options.baseUrl) !== null && _a !== void 0 ? _a : `${endpoint}/openai`;\n  options.apiVersion = (_b = options.apiVersion) !== null && _b !== void 0 ? _b : \"2023-12-01-preview\";\n  const userAgentInfo = `azsdk-js-openai-rest/1.0.0-beta.11`;\n  const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix ? `${options.userAgentOptions.userAgentPrefix} ${userAgentInfo}` : `${userAgentInfo}`;\n  options = Object.assign(Object.assign({}, options), {\n    userAgentOptions: {\n      userAgentPrefix\n    },\n    loggingOptions: {\n      logger: (_d = (_c = options.loggingOptions) === null || _c === void 0 ? void 0 : _c.logger) !== null && _d !== void 0 ? _d : logger.info\n    },\n    credentials: {\n      scopes: (_f = (_e = options.credentials) === null || _e === void 0 ? void 0 : _e.scopes) !== null && _f !== void 0 ? _f : [\"https://cognitiveservices.azure.com/.default\"],\n      apiKeyHeaderName: (_h = (_g = options.credentials) === null || _g === void 0 ? void 0 : _g.apiKeyHeaderName) !== null && _h !== void 0 ? _h : \"api-key\"\n    }\n  });\n  const client = getClient(baseUrl, credentials, options);\n  return client;\n}","map":{"version":3,"names":["getClient","logger","createClient","endpoint","credentials","options","baseUrl","_a","apiVersion","_b","userAgentInfo","userAgentPrefix","userAgentOptions","Object","assign","loggingOptions","_d","_c","info","scopes","_f","_e","apiKeyHeaderName","_h","_g","client"],"sources":["/workspaces/codespaces-blank/jupyter_react/node_modules/@azure/openai/src/rest/openAIClient.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * THIS IS AN AUTO-GENERATED FILE - DO NOT EDIT!\n *\n * Any changes you make here may be lost.\n *\n * If you need to make changes, please do so in the original source file, \\{project-root\\}/sources/custom\n */\n\nimport { getClient, ClientOptions } from \"@azure-rest/core-client\";\nimport { logger } from \"../logger.js\";\nimport { TokenCredential, KeyCredential } from \"@azure/core-auth\";\nimport { OpenAIContext } from \"./clientDefinitions.js\";\n\n/**\n * Initialize a new instance of `OpenAIContext`\n * @param endpoint - Supported Cognitive Services endpoints (protocol and hostname, for example:\n * https://westus.api.cognitive.microsoft.com).\n * @param credentials - uniquely identify client credential\n * @param options - the parameter for all optional parameters\n */\nexport default function createClient(\n  endpoint: string,\n  credentials: TokenCredential | KeyCredential,\n  options: ClientOptions = {},\n): OpenAIContext {\n  const baseUrl = options.baseUrl ?? `${endpoint}/openai`;\n  options.apiVersion = options.apiVersion ?? \"2023-12-01-preview\";\n  const userAgentInfo = `azsdk-js-openai-rest/1.0.0-beta.11`;\n  const userAgentPrefix =\n    options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n      ? `${options.userAgentOptions.userAgentPrefix} ${userAgentInfo}`\n      : `${userAgentInfo}`;\n  options = {\n    ...options,\n    userAgentOptions: {\n      userAgentPrefix,\n    },\n    loggingOptions: {\n      logger: options.loggingOptions?.logger ?? logger.info,\n    },\n    credentials: {\n      scopes: options.credentials?.scopes ?? [\"https://cognitiveservices.azure.com/.default\"],\n      apiKeyHeaderName: options.credentials?.apiKeyHeaderName ?? \"api-key\",\n    },\n  };\n\n  const client = getClient(baseUrl, credentials, options) as OpenAIContext;\n\n  return client;\n}\n"],"mappings":"AAAA;AACA;AAEA;;;;;;;AAQA,SAASA,SAAS,QAAuB,yBAAyB;AAClE,SAASC,MAAM,QAAQ,cAAc;AAIrC;;;;;;;AAOA,eAAc,SAAUC,YAAYA,CAClCC,QAAgB,EAChBC,WAA4C,EAC5CC,OAAA,GAAyB,EAAE;;EAE3B,MAAMC,OAAO,GAAG,CAAAC,EAAA,GAAAF,OAAO,CAACC,OAAO,cAAAC,EAAA,cAAAA,EAAA,GAAI,GAAGJ,QAAQ,SAAS;EACvDE,OAAO,CAACG,UAAU,GAAG,CAAAC,EAAA,GAAAJ,OAAO,CAACG,UAAU,cAAAC,EAAA,cAAAA,EAAA,GAAI,oBAAoB;EAC/D,MAAMC,aAAa,GAAG,oCAAoC;EAC1D,MAAMC,eAAe,GACnBN,OAAO,CAACO,gBAAgB,IAAIP,OAAO,CAACO,gBAAgB,CAACD,eAAe,GAChE,GAAGN,OAAO,CAACO,gBAAgB,CAACD,eAAe,IAAID,aAAa,EAAE,GAC9D,GAAGA,aAAa,EAAE;EACxBL,OAAO,GAAAQ,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACFT,OAAO;IACVO,gBAAgB,EAAE;MAChBD;KACD;IACDI,cAAc,EAAE;MACdd,MAAM,EAAE,CAAAe,EAAA,IAAAC,EAAA,GAAAZ,OAAO,CAACU,cAAc,cAAAE,EAAA,uBAAAA,EAAA,CAAEhB,MAAM,cAAAe,EAAA,cAAAA,EAAA,GAAIf,MAAM,CAACiB;KAClD;IACDd,WAAW,EAAE;MACXe,MAAM,EAAE,CAAAC,EAAA,IAAAC,EAAA,GAAAhB,OAAO,CAACD,WAAW,cAAAiB,EAAA,uBAAAA,EAAA,CAAEF,MAAM,cAAAC,EAAA,cAAAA,EAAA,GAAI,CAAC,8CAA8C,CAAC;MACvFE,gBAAgB,EAAE,CAAAC,EAAA,IAAAC,EAAA,GAAAnB,OAAO,CAACD,WAAW,cAAAoB,EAAA,uBAAAA,EAAA,CAAEF,gBAAgB,cAAAC,EAAA,cAAAA,EAAA,GAAI;;EAC5D,EACF;EAED,MAAME,MAAM,GAAGzB,SAAS,CAACM,OAAO,EAAEF,WAAW,EAAEC,OAAO,CAAkB;EAExE,OAAOoB,MAAM;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}